% dlg_blinker - GUI for entering BLINKER parameters
%

% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 3 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, 51 Franklin Street, Boston, MA 02110-1301, USA

function [outStruct, okay] = dlg_blinker(params)
okay = true;
theTitle = 'Blinker parameters';
closeOpenWindows(theTitle);
saveFileCb = ['saveFile = get(findobj(''parent'', gcbf, ''tag'', ''blinkerSaveFile''), ''String'');' ...
              '[fileName, pathName] = uiputfile(''*.mat'', ''Blinker output'', saveFile); drawnow;' ...
              'if fileName(1) ~= 0,' ...
              '   set(findobj(''parent'', gcbf, ''tag'', ''blinkerSaveFile''), ''string'', [ pathName fileName ]);' ...
              'end;' ...
             ];
dumpDirCb = ['dumpDir = get(findobj(''parent'', gcbf, ''tag'', ''blinkerDumpDir''), ''String'');' ...
             'dumpDirName = uigetdir(dumpDir, ''Blinker dump directory''); drawnow;' ...
             'if dumpDirName(1) ~= 0,' ...
             '   set(findobj(''parent'', gcbf, ''tag'', ''blinkerDumpDir''), ''string'', dumpDirName);' ...
             'end;' ...
             ];
signalTypeMenu = {'UseNumbers'; 'UseLabels'; 'UseICs'};
signalTypeValue =  find(strcmpi(signalTypeMenu, params.signalTypeIndicator.value), 1, 'first');


%% Set up the geometry for the GUI
geometry = {[3, 5, 2], [3, 5, 2], [3, 5, 2], [3, 5, 2], [3, 5, 2], ...
            [3, 5, 2], [3, 5, 2], [3, 5, 2], [3, 5, 2], [3, 5, 2], ...
            [3, 5, 2], [3, 2, 3, 2],  [3, 2, 3, 2]}; 

uilist = { ...
    { 'Style', 'text', 'string', 'Blinker save .mat file', ...
    'horizontalalignment', 'right', ...
    'TooltipString', params.blinkerSaveFile.description}, ... 
    { 'Style', 'edit', 'string', params.blinkerSaveFile.value, ...
    'horizontalalignment', 'left', 'tag',  'blinkerSaveFile', ...
    'TooltipString', params.blinkerSaveFile.description}, ...
    { 'Style', 'pushbutton', 'string', 'Browse...', 'callback', saveFileCb },... %Row 1
    { 'Style', 'text', 'string', 'Dump directory for images', ...
    'horizontalalignment', 'right', ...
    'TooltipString', params.blinkerDumpDir.description}, ... 
    { 'Style', 'edit', 'string', params.blinkerDumpDir.value, ...
    'horizontalalignment', 'left', 'tag',  'blinkerDumpDir', ...
    'TooltipString', params.blinkerDumpDir.description}, ...
    { 'Style', 'pushbutton', 'string', 'Browse...', 'callback', dumpDirCb },... % Row 2
    { 'Style', 'text', 'string', 'Experiment', ...
      'horizontalalignment', 'right', ...
      'TooltipString', params.experiment.description}, ...
    { 'Style', 'edit', 'string', params.experiment.value, ...
      'horizontalalignment', 'left',  'tag',  'experiment', ...
      'TooltipString', params.experiment.description}, ...
    { 'Style', 'text', 'string', '', 'horizontalalignment', 'right'}, ...  % Row 3
    { 'Style', 'text', 'string', 'Subject ID', ...
      'horizontalalignment', 'right', ...
      'TooltipString', params.subjectID.description}, ...
    { 'Style', 'edit', 'string', params.subjectID.value, ...
      'horizontalalignment', 'left',  'tag',  'subjectID', ...
      'TooltipString', params.subjectID.description}, ...
    { 'Style', 'text', 'string', '', 'horizontalalignment', 'right'}, ...  % Row 4
    { 'Style', 'text', 'string', 'Task', ...
      'horizontalalignment', 'right', ...
      'TooltipString', params.task.description}, ...
    { 'Style', 'edit', 'string', params.task.value, ...
      'horizontalalignment', 'left',  'tag',  'task', ...
      'TooltipString', params.task.description}, ...
    { 'Style', 'text', 'string', '', 'horizontalalignment', 'right'}, ...  % Row 5
    { 'Style', 'text', 'string', 'Unique name', ...
      'horizontalalignment', 'right', ...
      'TooltipString', params.uniqueName.description}, ...
    { 'Style', 'edit', 'string', params.uniqueName.value, ...
      'horizontalalignment', 'left',  'tag',  'uniqueName', ...
      'TooltipString', params.uniqueName.description}, ...
    { 'Style', 'text', 'string', '', 'horizontalalignment', 'right'}, ...  % Row 6
    { 'Style', 'text', 'string', params.startDate.value, ...
      'horizontalalignment', 'right', ...
      'TooltipString', params.startDate.description}, ...
    { 'Style', 'edit', 'string', params.startDate.value, ...
      'horizontalalignment', 'left',  'tag',  'startDate', ...
      'TooltipString', params.startDate.description}, ...
    { 'Style', 'text', 'string', '', 'horizontalalignment', 'right'}, ...  % Row 7
    { 'Style', 'text', 'string', 'Start time', ...
      'horizontalalignment', 'right', ...
      'TooltipString', params.startTime.description}, ...
    { 'Style', 'edit', 'string', params.startTime.value, ...
      'horizontalalignment', 'left',  'tag',  'startTime', ...
      'TooltipString', params.startTime.description}, ...
    { 'Style', 'text', 'string', '', 'horizontalalignment', 'right'}, ... % Row 8
    { 'Style', 'text', 'string', 'Signal type', ...
      'horizontalalignment', 'right', ...
      'TooltipString', params.signalTypeIndicator.description}, ... 
    { 'Style', 'popupmenu', 'string', 'Use numbers|Use labels|Use ICs', ...
      'value', signalTypeValue, 'horizontalalignment', 'left',  ...
      'tag', 'signalTypeIndicator', ...
       'TooltipString', params.signalTypeIndicator.description}, ...
    { 'Style', 'text', 'string', '', 'horizontalalignment', 'right'}, ...% Row 9
    { 'Style', 'text', 'string', 'Signal numbers', ...
      'horizontalalignment', 'right', ...
      'TooltipString', params.signalNumbers.description}, ...
    { 'Style', 'edit', 'string', vector2str(params.signalNumbers.value), ...
      'horizontalalignment', 'left',  'tag',  'signalNumbers', ...
      'TooltipString', params.signalNumbers.description}, ...
    { 'Style', 'text', 'string', '', 'horizontalalignment', 'right'}, ...% Row 10
    { 'Style', 'text', 'string', 'Signal labels', ...
      'horizontalalignment', 'right', ...
      'TooltipString', params.signalLabels.description}, ...
    { 'Style', 'edit', 'string', cellstr2str(params.signalLabels.value), ...
      'horizontalalignment', 'left',  'tag',  'signalLabels', ...
      'TooltipString', params.signalLabels.description}, ...
    { 'Style', 'text', 'string', '', 'horizontalalignment', 'right'},  ...% Row 11
    {'style', 'text', 'string', 'Show max distribution', ...
        'TooltipString', params.showMaxDistribution.description}, ...
    {'style', 'checkbox',  'Value', params.showMaxDistribution.value, ...
        'tag', 'showMaxDistribution'}, ...
    {'style', 'text', 'string', 'Dump blink structures', ...
        'TooltipString', params.dumpBlinkerStructures.description}, ...
    {'style', 'checkbox',  'Value', params.dumpBlinkerStructures.value, ...
        'tag', 'dumpBlinkerStructures'}, ... % Row 12
    {'style', 'text', 'string', 'Dump blink positions', ...
        'TooltipString', params.dumpBlinkPositions.description}, ...
    {'style', 'checkbox',  'Value', params.dumpBlinkPositions.value, ...
        'tag', 'dumpBlinkPositions'}, ...
    {'style', 'text', 'string', 'Dump blink images', ...
        'TooltipString', params.dumpBlinkImages.description}, ...
    {'style', 'checkbox',  'Value', params.dumpBlinkImages.value, ...
        'tag', 'dumpBlinkImages'} ... % Row 13 
    };

%% Call the GUI
[~, ~, ~, outStruct] = inputgui( geometry, uilist);
if isempty(outStruct) % Cancel was hit
    okay = false;
    return;
end
%% Massage the GUI return values to fit BLINKER's expectations
outStruct.signalTypeIndicator = signalTypeMenu{outStruct.signalTypeIndicator};
outStruct.dumpBlinkerStructures = logical(outStruct.dumpBlinkerStructures);
outStruct.showMaxDistribution = logical(outStruct.showMaxDistribution);
outStruct.dumpBlinkPositions = logical(outStruct.dumpBlinkPositions);
outStruct.dumpBlinkImages = logical(outStruct.dumpBlinkImages);
if ~isempty(outStruct.signalNumbers)
    outStruct.signalNumbers = sort(str2num(outStruct.signalNumbers)); %#ok<ST2NM>
else
    outStruct.signalNumbers = NaN;
end
if ~isempty(outStruct.signalLabels)
    outStruct.signalLabels = str2cellstr(outStruct.signalLabels);
end
    function closeOpenWindows(windowName)
        openWindow = findobj('Type', 'Figure', '-and', 'Name', windowName);
        if ~(isempty(openWindow))
            close(openWindow);
        end
    end
    
    function outString = cellstr2str(signalLabels)
         outString = '';
         if isempty(signalLabels) || ~iscellstr(signalLabels) 
             return;
         end
         outString = signalLabels{1};
         for n = 2:length(signalLabels)
             outString = [outString ',' signalLabels{n}]; %#ok<AGROW>
         end
    end
    
    function outCell = str2cellstr(labelValues)
         pieces = strsplit(labelValues, ',');
         outCell = cell(1, length(pieces));
         if isempty(pieces)
             return;
         end
         for n = 1:length(pieces)
             outCell{n} = pieces{n};
         end
         outCell = sort(outCell);
    end

end